@model FromLocalsToLocals.Models.VendorTypeViewModel


@{
    ViewData["Title"] = "All Services";
    Layout = "~/Views/Shared/_Layout.cshtml";


    var prevDisabled = !Model.Vendors.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Vendors.HasNextPage ? "disabled" : "";
    var vendorType = Html.ViewContext.HttpContext.Request.Query["vendorType"];
    var searchString = Html.ViewContext.HttpContext.Request.Query["searchString"];
    var itemCount = Html.ViewContext.HttpContext.Request.Query["itemCount"];
    var itemCountDouble = (!string.IsNullOrEmpty(itemCount))?double.Parse(itemCount) :20;
}


<h2 class="mt-4">All Services</h2>
<form asp-action="AllVendors" method="get" class="form-inline">
    <p>
        <select asp-for="VendorType" asp-items="Model.Types" class="form-control mr-2">
            <option value="">All</option>
        </select>
        Title: <input type="text" name="searchString" class="form-control" />
        Items: <input type="number" min="1" max="50" name="itemCount" class="form-control" value=@itemCountDouble  />
        <input type="submit" value="Filter" class="btn btn-success" />
    </p>
</form>
@{
    var itemsInRow = 4; // Make sure its divisible by 12
    var rows = Math.Ceiling(itemCountDouble / itemsInRow);
    var vendorCount = Model.Vendors.Count;
}

@for (int i = 0; i < rows; i++)
{
    <div class="row">

        @for (int j = 0; j < itemsInRow && i * itemsInRow + j < vendorCount; j++)
        {
            <div class="col-sm-@(12/itemsInRow) mb-2">
                <div class="card border-primary" style="width:inherit; height:inherit;">
                    @if (Model.Vendors[i * itemsInRow + j].Image == null)
                    {
                        <img src="~/Assets/appLogo.png" style="width:inherit ; height:100px;" />
                    }
                    else
                    {
                        <img src="data:image;base64,@System.Convert.ToBase64String(Model.Vendors[i * itemsInRow + j].Image)" style="width:inherit ; height:100px;" />
                    }
                    <div class="card-body">
                        <h5 class="card-title" style="margin:0px">@Model.Vendors[i * itemsInRow + j].Title</h5>
                        <p style="font-size:12px;">(@Model.Vendors[i * itemsInRow + j].VendorTypeDb)</p>
                        @if (Model.Vendors[i * itemsInRow + j].ReviewsCount.Sum() == 0)
                        {
                            <p>No Reviews</p>
                        }
                        else
                        {
                            @switch (@Math.Round(Model.Vendors[i * itemsInRow + j].Average()))
                            {
                                case 5:
                                    <p class="ml-3">
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star checked"></span>
                                        <span>@Model.Vendors[i * itemsInRow + j].Average().ToString("0.0")</span>
                                    </p>
                                    break;
                                case 4:
                                    <p class="ml-3">
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star"></span>
                                        <span>@Model.Vendors[i * itemsInRow + j].Average().ToString("0.0")</span>
                                    </p>
                                    break;
                                case 3:
                                    <p class="ml-3">
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star"></span>
                                        <span class="fa fa-star"></span>
                                        <span>@Model.Vendors[i * itemsInRow + j].Average().ToString("0.0")</span>
                                    </p>
                                    break;
                                case 2:
                                    <p class="ml-3">
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star"></span>
                                        <span class="fa fa-star"></span>
                                        <span class="fa fa-star"></span>
                                        <span>@Model.Vendors[i * itemsInRow + j].Average().ToString("0.0")</span>
                                    </p>
                                    break;
                                default:
                                    <p class="ml-3">
                                        <span class="fa fa-star checked"></span>
                                        <span class="fa fa-star"></span>
                                        <span class="fa fa-star"></span>
                                        <span class="fa fa-star"></span>
                                        <span class="fa fa-star"></span>
                                        <span>@Model.Vendors[i * itemsInRow + j].Average().ToString("0.0")</span>
                                    </p>
                                    break;
                            }
                        }
                    <div class="row">
                        <div class="col">
                            <a asp-route-id="@Model.Vendors[i * itemsInRow + j].ID" asp-controller="Vendors" asp-action="Details" class="btn btn-primary">Read More</a>
                        </div>
                        <div class="col">
                            <a asp-route-id="Vendor/@Model.Vendors[i * itemsInRow + j].ID" asp-controller="Reviews" asp-action="Reviews" class="btn btn-primary">Reviews</a>
                        </div>
                    </div>
                    </div>
                </div>
            </div>
        }

    </div>
}


<ul class="pagination">
    <li class="page-item @prevDisabled">
        <a class="page-link" href="@Url.Action("AllVendors", new {itemCount=itemCount, searchString = searchString , vendorType=vendorType , page = (Model.Vendors.PageIndex - 1) } )"><<</a>
    </li>

    @for (int i = 1; i <= Model.Vendors.TotalPages; i++)
    {
        <li class="@(i == Model.Vendors.PageIndex ? "page-item active" : "page-item")">
            <a class="page-link" href="@Url.Action("AllVendors", new {itemCount=itemCount, searchString = searchString , vendorType=vendorType , page = i })">@i</a>
        </li>
    }
    <li class="page-item @nextDisabled">
        <a class="page-link" href="@Url.Action("AllVendors", new {itemCount=itemCount, searchString = searchString , vendorType=vendorType ,page = (Model.Vendors.PageIndex + 1) } )">>></a>
    </li>
</ul>

