@model FromLocalsToLocals.Models.VendorTypeViewModel


@{
    ViewData["Title"] = "All Services";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="mt-4">All Services</h2>
<form asp-action="AllVendors" method="get" class="form-inline">
    <p>
        <select asp-for="VendorType" asp-items="Model.Types" class="form-control mr-2">
            <option value="">All</option>
        </select>
        Title: <input type="text" name="searchString" class="form-control" />
        <input type="submit" value="Filter" class="btn btn-success" />
    </p>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Vendors[0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Vendors[0].Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Vendors[0].VendorTypeDb)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Vendors)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.VendorTypeDb)
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.ID">Details</a>
                </td>
            </tr>
        }
    </tbody>
</table>
@{ 
    var itemsInRow = 4; // Make sure its divisible by 12
    var rows = Math.Ceiling((double)Model.Vendors.Count/itemsInRow);
    var vendorCount = Model.Vendors.Count;
}

@for(int i = 0; i<rows; i++)
{
<div class="row m-2">

    @for(int j = 0;j<itemsInRow && i*itemsInRow+j < vendorCount ;j++){
        <div class="col-sm-@(12/itemsInRow)">
            <div class="card border-primary" style="width:inherit; height:inherit;">
                <div class="card-header bg-transparent border-success">@Model.Vendors[i*itemsInRow+j].Title</div>
                <img class="card-img-top" src="~/Assets/appLogo.png" alt="Card image cap">
                <div class="card-body">
                    <h5 class="card-title">Card title</h5>
                    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                    <a href="#" class="btn btn-primary">Go somewhere</a>
                </div>
            </div>
        </div>
    }
    
</div>
}


<ul class="pagination">
    @{
        var prevDisabled = !Model.Vendors.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.Vendors.HasNextPage ? "disabled" : ""; 
        var vendorType = Html.ViewContext.HttpContext.Request.Query["vendorType"];
        var searchString = Html.ViewContext.HttpContext.Request.Query["searchString"];  
    }
    <li class="page-item @prevDisabled">
        <a class="page-link" href="@Url.Action("AllVendors", new {searchString = searchString , vendorType=vendorType , page = (Model.Vendors.PageIndex - 1) } )"><<</a>
    </li>

    @for (int i = 1; i <= Model.Vendors.TotalPages; i++)
    {
        <li class="@(i == Model.Vendors.PageIndex ? "page-item active" : "page-item")">
            <a class="page-link" href="@Url.Action("AllVendors", new { searchString = searchString , vendorType=vendorType , page = i })">@i</a>
        </li>
    }
    <li class="page-item @nextDisabled">
        <a class="page-link" href="@Url.Action("AllVendors", new { searchString = searchString , vendorType=vendorType ,page = (Model.Vendors.PageIndex + 1) } )">>></a>
    </li>
</ul>

