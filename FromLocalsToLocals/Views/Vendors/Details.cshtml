@model FromLocalsToLocals.Models.Vendor
@using Microsoft.AspNetCore.Mvc.Localization
@inject UserManager<AppUser> userManager
@inject IViewLocalizer _localizer
@{

    ViewData["Title"] = _localizer["Details"];
    Layout = "~/Views/Shared/_Layout.cshtml";

    var userForFeed = await userManager.GetUserAsync(User);
    if (userForFeed !=null && userForFeed.Id != Model.User.Id) userForFeed = null;

    var timeSpan = new TimeSpan(0);

}
@using static FromLocalsToLocals.Utilities.TimeCalculator
@using Microsoft.EntityFrameworkCore


<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet">
<link rel="stylesheet" href="~/css/Posts.css">

<h2 class="mt-4"></h2>
<div class="row">
    <div class="col m-lg-5 text-center">
        @if (Model.Image == null)
        {
            <img src="~/Assets/localSeller.png" style="max-width: 90%; max-height: 80%;" />
        }
        else
        {
            <img src="data:image;base64,@System.Convert.ToBase64String(Model.Image)" style="max-width: 90%; max-height: 80%;" />
        }
    </div>
    <div class="col">
        <div class="m-4">
            <div class="row">
                @switch (Model.VendorType)
                {
                    case FromLocalsToLocals.Utilities.VendorType.CarRepair:<p class="text-muted text-uppercase">@_localizer["Car repair"]</p>
                    break;

                case FromLocalsToLocals.Utilities.VendorType.RuralTourism:<p class="text-muted text-uppercase">Rural tourism</p>
                    break;

                default: <p class="text-muted text-uppercase">@Model.VendorType</p>
                break;
        }
            </div>
            <div class="row" style="margin-top: -15px;">
                <h2>@Model.Title</h2>
            </div>
            <div class="row mb-3">
                <p>@_localizer["Service registered | "]@CalcRelativeTime(Model.DateCreated)</p>
            </div>
            <hr />
            <div class="row">
                @if (string.IsNullOrEmpty(@Model.About))
                {
                    <p class="font-italic">@_localizer["No description provided"]</p>
                }
                else
                {
                    <p class="font-italic">@Model.About</p>
                }
            </div>
            <hr />
            <div class="row mt-1 mb-3">
                <h4>Working Hours</h4>
            </div>
            @foreach (var item in Model.VendorHours)
            {
                <div class="row">
                    <div class="col">
                        @switch (item.Day)
                        {
                            case 1:<h5>Monday</h5>
                                break;
                            case 2: <h5>Tuesday</h5>
                                break;
                            case 3: <h5>Wednesday</h5>
                                break;
                            case 4: <h5>Thursday</h5>
                                break;
                            case 5: <h5>Friday</h5>
                                break;
                            case 6: <h5>Saturday</h5>
                                break;
                            default: <h5>Sunday</h5>
                                break;
                        }
                    </div>
                    <div class="col">
                        @if (item.OpenTime > timeSpan && item.CloseTime > timeSpan)
                        {
                            <h5>@item.OpenTime.ToString("hh\\:mm") - @item.CloseTime.ToString("hh\\:mm")</h5>
                        }
                        else
                        {
                            <h5>Closed</h5>
                        }
                    </div>
                </div>
            }

            <nav class="navbar navbar-expand-lg navbar-light bg-white mt-4" style="color: gray; border-radius: 4px;">
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse myNav" id="navbarNav">
                    <ul class="navbar-nav justify-content-center w-100">
                        <li class="nav-item text-center" style="width: 33%;">
                            <a class="nav-link" id="address" style="font-size: 19px;" onclick="showMap()">@_localizer["Address"]</a>
                        </li>
                        <li class="nav-item text-center" style="width: 33%;">
                            <a class="nav-link" id="feedBtn" style="font-size: 19px;" onclick="showFeed()">News Feed</a>
                        </li>
                        <li class="nav-item text-center" style="width: 33%;">
                            <a class="nav-link" style="font-size: 19px;" asp-route-id="Vendor/@Model.ID" asp-controller="Reviews" asp-action="Reviews">@_localizer["Reviews"]</a>
                        </li>
                    </ul>
                </div>
            </nav>
            <div class="row mt-3 mb-3" id="map" style="height:250px;">
                <p><b>@_localizer["Address:&nbsp;"]</b>@Model.Address</p>
                <div id="mapid" style="width: 100%; height: 90%;"></div>
            </div>

            <div class="row mt-3 mb-3" id="feed" style="display:none">
                @if (userForFeed != null)
                {
                    @await Component.InvokeAsync("CreatePost", new FromLocalsToLocals.Models.ViewModels.CreatePostVM { User = userForFeed, DisplayInDetails = true, VendorTitle = Model.Title })
                }
                @await Component.InvokeAsync("NewsFeed", new FromLocalsToLocals.Models.ViewModels.FeedVM { ActiveUser = userForFeed, ActiveTab = FromLocalsToLocals.Utilities.Enums.FeedTabs.VendorFeed, DisplayInDetails = true, Vendor = Model })
            </div>
        </div>
    </div>
</div>


<script>
    var vendor = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    var center = [vendor.Latitude, vendor.Longitude];
    var zoom = 13;
</script>
<script src="~/js/createMap.js"></script>
<script>
    var marker = L.marker(center);
    var mapas = document.getElementById("map");
    var feed = document.getElementById("feed");

    marker.addTo(map);

    function showMap() {
        if (mapas.style.display == "none") {
            feed.style.display = "none";
            $("#map").toggle("slow");
        } else {
            $("#map").toggle("slow");
        }
    }

    function showFeed() {
        if (feed.style.display == "none") {
            mapas.style.display = "none";
            $("#feed").toggle("slow");
        } else {
            $("#feed").toggle("slow");
        }
    }
</script>

